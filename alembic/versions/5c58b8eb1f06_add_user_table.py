"""Add user table

Revision ID: 5c58b8eb1f06
Revises: 736cc131e899
Create Date: 2025-09-26 14:49:36.880427

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5c58b8eb1f06'
down_revision: Union[str, Sequence[str], None] = '736cc131e899'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_index(op.f('ix_build_registrations_build_id'), table_name='build_registrations')
    op.drop_table('build_registrations')
    op.drop_index(op.f('ix_mcp_servers_name'), table_name='mcp_servers')
    op.drop_table('mcp_servers')
    op.drop_table('items')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('items',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('item_type', postgresql.ENUM('TYPE_A', 'TYPE_B', 'TYPE_C', name='item_type'), autoincrement=False, nullable=False),
    sa.Column('item_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('items_pkey'))
    )
    op.create_table('mcp_servers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('server_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('transport_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_health_check', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mcp_servers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_mcp_servers_name'), 'mcp_servers', ['name'], unique=True)
    op.create_table('build_registrations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('build_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mcp_server_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('registered_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['mcp_server_id'], ['mcp_servers.id'], name=op.f('build_registrations_mcp_server_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('build_registrations_pkey'))
    )
    op.create_index(op.f('ix_build_registrations_build_id'), 'build_registrations', ['build_id'], unique=False)
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
